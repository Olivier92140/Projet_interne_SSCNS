{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ea57aab7",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"K-means + ObservableJS\"\n",
    "author: Olivier Malahel\n",
    "format: html\n",
    "---\n",
    "\n",
    "## import des bibliothèques Observable\n",
    "```{ojs}\n",
    "import { Inputs } from \"@observablehq/stdlib\"\n",
    "import { Plot } from \"@observablehq/plot\"\n",
    "```\n",
    "\n",
    "## Génération des notes dans quatre matières\n",
    "\n",
    "```{js}\n",
    "// 1. Installer les paquets (npm) ou charger via CDN avant d’exécuter ce code :\n",
    "//    npm install seedrandom d3-random\n",
    "\n",
    "import seedrandom from \"seedrandom\";\n",
    "import { randomNormal } from \"d3-random\";\n",
    "\n",
    "// 2. Paramètres\n",
    "const seed       = \"123\";\n",
    "const n_students = 30;\n",
    "\n",
    "// 3. Initialisation du générateur seedé\n",
    "const rng    = seedrandom(seed);\n",
    "const normal = randomNormal.source(rng);\n",
    "\n",
    "// 4. Génération du tableau “notes” avec colonne Etudiant\n",
    "const notes = Array.from({ length: n_students }, (_, i) => ({\n",
    "  Etudiant:       `E${String(i + 1).padStart(2, \"0\")}`,\n",
    "  Mathematiques:  +normal(14,   2  ).toFixed(1),\n",
    "  Physique:       +normal(12,   3  ).toFixed(1),\n",
    "  Informatique:   +normal(15,   2.4).toFixed(1),\n",
    "  Chimie:         +normal(11,   3  ).toFixed(1)\n",
    "}));\n",
    "\n",
    "// 5. Simuler rownames(notes) et notes$Etudiant <- NULL\n",
    "//    On crée un objet dont chaque clef est l’étudiant et la valeur l’objet de ses notes\n",
    "const notesByStudent = Object.fromEntries(\n",
    "  notes.map(({ Etudiant, ...scores }) => [Etudiant, scores])\n",
    ");\n",
    "\n",
    "// 6. Affichage final\n",
    "console.log(notesByStudent);\n",
    "```\n",
    "\n",
    "## Affichage du tableau des notes\n",
    "\n",
    "```{ojs}\n",
    "viewof data = Inputs.table(initial, {\n",
    "  columns: [\"Etudiant\", \"Maths\", \"Physique\", \"Info\", \"Chimie\"],\n",
    "  label: \"Éditez les notes des étudiants\"\n",
    "})\n",
    "```\n",
    "\n",
    "### Curseur pour faire varier le nombre de clusters \n",
    "\n",
    "```{ojs}\n",
    "// 3. Slider pour choisir k\n",
    "viewof k = Inputs.range([1, 6], {\n",
    "  value: 3,\n",
    "  step: 1,\n",
    "  label: \"Nombre de clusters (k)\"\n",
    "})\n",
    "\n",
    "// 4. Calcul du k-means\n",
    "points = data.map(d => ({\n",
    "  x: +d.Maths,      // abscisse = Mathématiques\n",
    "  y: +d.Chimie,     // ordonnée = Chimie\n",
    "  name: d.Etudiant\n",
    "}))\n",
    "\n",
    "function kmeans(points, k, maxIter = 50) {\n",
    "  let centroids = points\n",
    "    .slice()\n",
    "    .sort(() => Math.random() - 0.5)\n",
    "    .slice(0, k)\n",
    "    .map(p => ({x: p.x, y: p.y}))\n",
    "  let assignments = new Array(points.length)\n",
    "\n",
    "  for (let iter = 0; iter < maxIter; iter++) {\n",
    "    // Affectation\n",
    "    for (let i = 0; i < points.length; i++) {\n",
    "      let best = 0, bestDist = Infinity\n",
    "      for (let j = 0; j < k; j++) {\n",
    "        const dx = points[i].x - centroids[j].x\n",
    "        const dy = points[i].y - centroids[j].y\n",
    "        const d2 = dx*dx + dy*dy\n",
    "        if (d2 < bestDist) { bestDist = d2; best = j }\n",
    "      }\n",
    "      assignments[i] = best\n",
    "    }\n",
    "    // Recalcul des centroïdes\n",
    "    const sums = Array.from({length: k}, () => ({x:0,y:0,count:0}))\n",
    "    for (let i = 0; i < points.length; i++) {\n",
    "      const c = assignments[i]\n",
    "      sums[c].x += points[i].x\n",
    "      sums[c].y += points[i].y\n",
    "      sums[c].count++\n",
    "    }\n",
    "    let moved = false\n",
    "    for (let j = 0; j < k; j++) {\n",
    "      if (!sums[j].count) continue\n",
    "      const nx = sums[j].x / sums[j].count\n",
    "      const ny = sums[j].y / sums[j].count\n",
    "      if (nx !== centroids[j].x || ny !== centroids[j].y) moved = true\n",
    "      centroids[j].x = nx; centroids[j].y = ny\n",
    "    }\n",
    "    if (!moved) break\n",
    "  }\n",
    "\n",
    "  return {centroids, assignments}\n",
    "}\n",
    "\n",
    "result = kmeans(points, k)\n",
    "centroids = result.centroids\n",
    "assignments = result.assignments\n",
    "```\n",
    "\n",
    "## Tableau des notes avec les clusters\n",
    "\n",
    "```{ojs}\n",
    "// 5. Tableau des clusters\n",
    "dataWithCluster = data.map((d,i) => ({\n",
    "  ...d,\n",
    "  Cluster: `Cluster ${assignments[i]+1}`\n",
    "}))\n",
    "viewof clusterTable = Inputs.table(dataWithCluster, {\n",
    "  columns: [\"Etudiant\",\"Maths\",\"Physique\",\"Info\",\"Chimie\",\"Cluster\"],\n",
    "  label: \"Profils et clusters\"\n",
    "})\n",
    "\n",
    "// 6. Tableau des centroïdes\n",
    "centroidsWithLabel = centroids.map((c,i) => ({\n",
    "  Cluster: `Cluster ${i+1}`,\n",
    "  Centre_Maths: c.x,\n",
    "  Centre_Chimie: c.y\n",
    "}))\n",
    "viewof centroidTable = Inputs.table(centroidsWithLabel, {\n",
    "  columns: [\"Cluster\",\"Centre_Maths\",\"Centre_Chimie\"],\n",
    "  label: \"Centres des clusters\"\n",
    "})\n",
    "```\n",
    "\n",
    "## Représentation graphique \n",
    "\n",
    "Ici, les notes des élèves en mathématiques et en chimie, sont représentées dans le plan  \n",
    "\n",
    "```{ojs}\n",
    "// 7. Affichage du scatter : Maths vs Chimie\n",
    "Plot.plot({\n",
    "  width: 600,\n",
    "  height: 400,\n",
    "  x: {label: \"Mathématiques\"},\n",
    "  y: {label: \"Chimie\"},\n",
    "  marks: [\n",
    "    // points\n",
    "    Plot.dot(\n",
    "      points.map((p,i) => ({...p, cluster: String(assignments[i])})),\n",
    "      {x:\"x\", y:\"y\", fill:\"cluster\", title:\"name\"}\n",
    "    ),\n",
    "    // croix = centroïdes\n",
    "    Plot.dot(\n",
    "      centroids.map((c,i) => ({x:c.x, y:c.y, cluster:String(i)})),\n",
    "      {x:\"x\", y:\"y\", stroke:\"black\", symbol:\"cross\", strokeWidth:2}\n",
    "    )\n",
    "  ]\n",
    "})\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/usr/local/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
